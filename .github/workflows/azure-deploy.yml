# 工作流名称（可自定义）
name: Azure 前端react自动部署流水线（static web apps）

# 触发条件：当代码推送到 main 分支时启动
on: 
  push:
    branches: [ "main" ]  # 监控 main 分支
    paths: 
      - 'frontend/**'  # 仅监控前端目录变更
  workflow_dispatch:  # 支持手动触发工作流

# 任务列表（一个任务 = 一台虚拟机执行）
jobs:
  # 任务1：构建和部署（任务ID）
  build_and_deploy_frontend:
    # 在最新版 Ubuntu 系统运行
    runs-on: ubuntu-latest
    
    # 具体步骤（按顺序执行）
    steps:
      # 步骤1：获取代码（必须）
      - name: 拉取仓库代码
        uses: actions/checkout@v4  # GitHub 官方动作
      
      # 步骤2：安装 Node.js 环境
      - name: 设置 Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22 # 指定 Node 版本
      
      # 步骤3：清理缓存并安装依赖包
      - name: 清理缓存并安装 npm 依赖
        working-directory: ./frontend  # 指定子目录
        run: |
            rm -rf build  
            rm -rf node_modules/.cache  
            npm install
      
      
      # 步骤4：构建 React 应用
      - name: 清理并构建生产包
        working-directory: ./frontend  # 指定子目录
        run: 
            npm run build

        
      # 步骤5：部署到 Azure
      - name: 发布到 Azure 静态应用
        uses: Azure/static-web-apps-deploy@v1  # Azure 官方动作
        with:
          #  安全令牌（从 GitHub Secrets 获取）
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_TOKEN }}
          # 源代码位置（React 项目根目录）
          app_location: "frontend"
          # 构建输出目录（React 默认为 build）
          output_location: "build"
          action: "upload"  # 指定操作类型
          app_build_command: "npm run build"  # 构建应用的命令
          skip_app_build: false  # 是否跳过应用构建
          production_branch: "main"  # 生产分支
          deployment_environment: "production"  # 部署环境
          github_id_token: ${{ github.token }}  # GitHub ID 令牌

